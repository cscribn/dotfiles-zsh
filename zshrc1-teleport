# ---------------------------------------------------------------------------- #
# TELEPORT                                                                     #
# ---------------------------------------------------------------------------- #

#
# Teleport CLI auto-login and auto-update functions
#

# Function: get-teleport-version
# Description: Retrieves the version of Teleport for the specified component (server or client).
# Parameters:
#     - component: The component for which to retrieve the version (server or client).
# Returns:
#     - The version of the specified component.
get-teleport-version() {
    local component="$1"
    local response
    local version
    
    if [ "$component" = "server" ]; then
        # this is a public endpoint, so no auth is required
        response=$(curl -s https://pluralsight.teleport.sh/webapi/ping)
        version=$(echo "$response" | jq -r '.server_version')
    elif [ "$component" = "client" ]; then
        if command -v tsh >/dev/null 2>&1; then
            # if we're not authenticated we can still retrieve the client version
            version=$(tsh version --client -f json | jq -r ".version")
        else
            version="n/a"
        fi
    else
        echo "Error: Invalid component specified. Please specify 'client' or 'server'."
        return 1
    fi
    
    if [ -z "$version" ]; then
        echo "Error: Failed to retrieve the $component version."
        return 1
    fi
    
    echo "$version"
}

# Function: install-teleport
# Description: Downloads and installs a specific version of Teleport Enterprise.
# Parameters:
#     - version: The version of Teleport Enterprise to install.
# Returns:
#     - None.
install-teleport() {
    local version=${1}
        local url="https://cdn.teleport.dev/teleport-ent-${version}.pkg"
        local pkg="teleport-ent-${version}.pkg"
        
        # Download the package
        if ! curl -o ${pkg} ${url}; then
            echo "Error: Failed to download the package."
            rm ${pkg}    # Cleanup the downloaded package
            return 1
        fi
        
        # Install the package
        if ! sudo -A installer -pkg ${pkg} -target /; then
            echo "Error: Failed to install the package."
            rm ${pkg}    # Cleanup the downloaded package
            return 1
        fi
        
        echo "Teleport ${version} installed successfully."
        
        # Cleanup the downloaded package
        rm ${pkg}
}

# Function: update-teleport-client
# Description: Updates the Teleport client to match the version of the Teleport server.
# Parameters:
#     - None.
# Returns: 
#     - None.
update-teleport-client() {
    local server_version=$(get-teleport-version server)
    local client_version=$(get-teleport-version client)
    if [ "${server_version}" != "${client_version}" ]; then
        echo "Server version: ${server_version}"
        echo "Client version: ${client_version}"
        echo "Updating teleport client to server version"
        install-teleport ${server_version}
    else
        echo "Teleport client is up to date"
    fi
}

# Check if there is an active session, then check for updates to the client
# Install the latest client and then login
function tsh-update-and-login () {
    if ! tsh status > /dev/null 2>&1
    then
        update-teleport-client
        echo "No active session. Logging you in first by running 'tsh --proxy https://pluralsight.teleport.sh --auth okta login'..."
        tsh --proxy https://pluralsight.teleport.sh --auth okta login
    fi
}

# Quickly request elevated privileges in whatever enironment you need.
function tshrequest() {
    if [ $# -le 1 ]
    then
        echo "Need an Environment and a JIRA Ticket"
        echo "Example: tshrequest staging ATM-123"
        return 0
    fi
    tsh request create --roles developer-$1-privileged --reason "'$2'"
}

# If you're in the DevOps group, you'll want to use an alias more like
#function tshrequest() {
#    if [ $# -le 0 ]
#    then
#        echo "Need a JIRA Ticket"
#        echo "Example: tshrequest ATM-123"
#        return 0
#    fi
#    tsh request create --roles devops-privileged-access --reason "'$1'"
#}

#
# Teleport CLI shell aliases
#

# Okta auth into Teleport
alias tshlogin=tsh-update-and-login

# And an alias to revoke those privileges from yourself whenever you're done.
alias tshrevoke='tsh request drop'

# Season the following ones to taste for your BC(s) databases
# You can create multiple proxy tunnels at a time so consider incrementing the port numbers
alias tsh-staging-whatever-db='tsh proxy db --db-name=the_db_name is-bounded-context-aurora --port 5433'
alias tsh-staging-whatever-db-reader='tsh proxy db --db-roles=teleport-admin --db-name=the_db_name is-bounded-context-aurora --port 5433'
alias tsh-production-whatever-db='tsh proxy db --db-name=the_db_name ip-bounded-context-aurora --port 5433'
alias tsh-production-whatever-db-reader='tsh proxy db --db-roles=teleport-admin --db-name=the_db_name ip-bounded-context-aurora --port 5433'
